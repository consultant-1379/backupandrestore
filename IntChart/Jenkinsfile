def bob = './bob/bob -r IntChart/ruleset.yaml'

pipeline {
    agent {
        node {
            label SLAVE
        }
    }
    options {
        timestamps()
        timeout(time: 90, unit: 'MINUTES')
    }
    environment {
        BRANCH=params.GERRIT_BRANCH.substring(GERRIT_BRANCH.lastIndexOf("-") + 1)
    }
    stages {
        stage("Set BuildName") {
            steps {
                  buildName "#" + currentBuild.number + " | " + params.GERRIT_CHANGE_SUBJECT.substring(0, GERRIT_CHANGE_SUBJECT.indexOf(" ")) + " | ${GERRIT_BRANCH} | " + params.GERRIT_PATCHSET_UPLOADER_NAME
                  }
           }
        stage('Prepare bob') {
            steps {
                     sh 'git clean -xdff --exclude=.m2 --exclude=settings.xml'
                     sh 'git submodule sync'
                     sh 'git submodule update --init --recursive'
                  }
            }
        stage('Generate Version') {
            steps {
                sh "${bob} generate-version"
            }
        }
        stage('Setup Repo Path') {
            when { expression { (params.RELEASE=="true") } }
            steps {
                script {
                    if (env.BRANCH == "master") {
                        sh "${bob} setup-repo-path:is-master"
                    }
                    else {
                        sh "${bob} setup-repo-path:is-dev"
                    }
                }
            }
        }
        stage('Syntax Validations') {
            parallel {
                stage('Bob Lint') {
                    steps {
                         sh "${bob} lint"
                    }
                }
                stage('Pep8 - Int Test Code') {
                    steps {
                        sh "pep8 ./test/"
                    }
                }
                stage('Pylint - Int Test Code') {
                    steps {
                        sh "python3 -m pylint --reports=n --rcfile=./testframework/.pylintrc ./test/*.py"
                    }
                }
                stage('Build Snapshot of Integration Chart with latest BRO release') {
                    steps {
                        withCredentials([string(credentialsId: 'hub-arm-rnd-ki-api-token', variable: 'API_TOKEN')]) {
                            sh "${bob} image"
                        }
                    }
                }
            }
        }
        stage('Push Snapshot of Integration Chart with latest BRO release') {
            when { expression { (params.RELEASE=="true") } }
            steps {
                withCredentials([string(credentialsId: 'hub-arm-rnd-ki-api-token', variable: 'API_TOKEN')]) {
                    sh "${bob} push"
                }
            }
        }
        stage('System Test') {
            when { expression { (params.RELEASE=="true") } }
            steps {
                script {
                    if (params.GERRIT_PATCHSET_UPLOADER_NAME == "Cron job"){
                        env.PYTHON_FILE = "sys_test.py"
                        writeFile file: "namespace-used.txt", text: "ci-int-snap-test-nightly"
                        env.NAMESPACE = readFile 'namespace-used.txt'
                        archiveArtifacts 'namespace-used.txt'
                    } else {
                        def namespaces = ["ci-int-snap-test", "ci-int-snap-test-two", "ci-int-snap-test-three"]
                        if (Jenkins.instance.getItem("${env.JOB_NAME}").builds[1..3].every { build-> build.result.toString() == 'FAILURE' || build.result.toString() == 'ABORTED'}) {
                            manualChoiceRequired = true
                        } else {
                            try {
                                for (int i = 6; i >= 1; i--) {
                                    copyArtifacts(filter: 'namespace-used.txt', projectName: currentBuild.projectName, optional: true,
                                      selector: specific((currentBuild.number-i).toString()))
                                    if (fileExists('namespace-used.txt')) {
                                        if (Jenkins.instance.getItem("${env.JOB_NAME}").getBuildByNumber(currentBuild.number-i).result != hudson.model.Result.SUCCESS) {
                                            namespaces -= readFile(file: "namespace-used.txt")
                                        } else {
                                            if (readFile(file: "namespace-used.txt") != "ci-int-snap-test-nightly") {
                                                namespaces += readFile(file: "namespace-used.txt")
                                                namespaces.unique()
                                            }
                                        }
                                    }
                                }
                                if (namespaces) {
                                    writeFile file: "namespace-used.txt", text: namespaces[0]
                                    archiveArtifacts 'namespace-used.txt'
                                    env.NAMESPACE = readFile 'namespace-used.txt'
                                    buildName "#" + currentBuild.number + " | " + params.GERRIT_CHANGE_SUBJECT.substring(0, GERRIT_CHANGE_SUBJECT.indexOf(" ")) + " | ${GERRIT_BRANCH} | " + params.GERRIT_PATCHSET_UPLOADER_NAME + " | ${NAMESPACE}"
                                    manualChoiceRequired = false
                                } else {
                                    manualChoiceRequired = true
                                }
                            } catch(err) {
                                error("Failed to get a namespace")
                            }
                        }
                        if (manualChoiceRequired) {
                            def jobName = currentBuild.fullDisplayName
                            emailext body: '''${SCRIPT, template="groovy-html.template"}''',
                            mimeType: 'text/html',
                            subject: "${jobName} [PICK A NAMESPACE]",
                            to: '$GERRIT_CHANGE_OWNER_EMAIL',
                            replyTo: '$GERRIT_CHANGE_OWNER_EMAIL',
                            recipientProviders: [[$class: 'DevelopersRecipientProvider']]
                            def getNamespaceChoice
                            def userInput = input(
                                    id: 'userInput', message: 'Choose namespace:?',
                                    parameters: [
                                            choice(choices: 'ci-int-snap-test\nci-int-snap-test-two\nci-int-snap-test-three',
                                                    description: 'Choose a namespace',
                                                    name: 'Namespace')
                                    ])
                            getNamespaceChoice = userInput?:''
                            writeFile file: "namespace-used.txt", text: "${getNamespaceChoice}"
                            env.NAMESPACE = readFile 'namespace-used.txt'
                            buildName "#" + currentBuild.number + " | " + params.GERRIT_CHANGE_SUBJECT.substring(0, GERRIT_CHANGE_SUBJECT.indexOf(" ")) + " | ${GERRIT_BRANCH} | " + params.GERRIT_PATCHSET_UPLOADER_NAME + " | ${NAMESPACE}"
                            archiveArtifacts 'namespace-used.txt'
                        }
                    }
                }
                withCredentials([
                    string(credentialsId: 'hub-arm-rnd-ki-api-token', variable: 'API_TOKEN'),
                    file(credentialsId: 'hall060', variable: 'KUBECONFIG'),
                    file(credentialsId: 'sftp-users-yaml', variable: 'USERS_YAML'),
                    file(credentialsId: 'hub-armdocker-config-json', variable: 'ARMDOCKER_CONF')
                ]) {
                    sh "${bob} testdeploy"
                }
            }
        }
    }
    post {
        always {
            script {
                if (env.RELEASE=="true") {
                    archiveArtifacts artifacts: '.bob/untar_tmp/eric-bro-int/Chart.lock, output.html, pod_logs/*.*,', allowEmptyArchive: true
                }
                archiveArtifacts artifacts: 'service/target/site/surefire-report.html, .bob/eridoc-upload-report.log', allowEmptyArchive: true
            }
        }
        failure {
            script {
                if (env.RELEASE=="true" &&  env.BRANCH == "master" && env.PYTHON_FILE != "sys_test.py") {
                    def jobName = currentBuild.fullDisplayName
                    emailext body: '''${SCRIPT, template="groovy-html.template"}''',
                    mimeType: 'text/html',
                    subject: "[BUILD FAILURE] ${jobName}",
                    to: '$DEFAULT_RECIPIENTS',
                    replyTo: '$DEFAULT_RECIPIENTS',
                    recipientProviders: [[$class: 'CulpritsRecipientProvider']]
                }
            }
        }
    }
}
