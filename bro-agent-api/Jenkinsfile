def bob = './bob/bob'

pipeline {
    agent {
        node {
            label SLAVE
        }
    }
    options {
        timestamps()
        timeout(time: 1, unit: 'HOURS')
    }
    environment {
        HUB = credentials('eadphub-psw')
        GERRIT = credentials('eadphub-psw')
        SEMANTIC_VERSION = "${sh(script:'cat fossa-config-bro-agent-api.yml | sed -n -e \'s/^.*version: //p\'', returnStdout: true).trim()}"
        CODE_CHANGE = "${sh(script: "git diff --name-only HEAD HEAD~1 | grep -E '^bro-agent-api.*\\.java|^bro-agent-api/pom.xml' | wc -l", returnStdout: true).trim()}"
    }
    tools {
        jdk "JDK11"
    }
    stages {
        stage('Init') {
            steps {
                sh 'git clean -xdff --exclude=.m2 --exclude=settings.xml'
                sh 'git submodule sync'
                sh 'git submodule update --init --recursive'
            }
        }
        stage('MVN Build') {
            steps {
                script {
                    if (params.RELEASE=="false" && env.CODE_CHANGE != "0") {
                        buildName "#" + currentBuild.number + " | " + params.GERRIT_CHANGE_SUBJECT.substring(0, GERRIT_CHANGE_SUBJECT.indexOf(" ")) + " | ${GERRIT_BRANCH} | ${GERRIT_PATCHSET_UPLOADER_NAME}"
                        withSonarQubeEnv('Sonarqube Server') {
                            sh "${bob} -r bro-agent-api/ruleset.yaml mvn-sonar"
                            sh 'sed -i 1d bro-agent-api/newdeptree.txt'
                            sh 'diff bro-agent-api/currentdeptree.txt bro-agent-api/newdeptree.txt'
                        }
                    }
                    else {
                        sh 'mvn -f bro-agent-api/pom.xml -Dcheckstyle.skip -Dpmd.skip -DskipTests package'
                    }
                }
            }
        }
        stage('Munin Set/Create Version') {
            steps {
                withCredentials([string(credentialsId: 'munin_token', variable: 'MUNIN_TOKEN')]) {
                    script {
                        uplift = sh (script: "git log -1 | grep '.*\\[UPLIFT\\].*'", returnStatus: true)
                        if (uplift == 0) {
                            sh "${bob} -r bro-agent-api/ruleset.yaml munin-update-version"
                        }
                    }
                }
            }
        }
        stage('Validate license agreement') {
            steps {
                sh "${bob} -r bro-agent-api/ruleset.yaml license-agreement"
            }
        }
        stage('Push Release of agent API') {
            when { expression {(params.RELEASE=="true")} }
            steps {
                script {
                    if(params.RELEASE_TO_NEXUS=="RELEASE") {
                        sh "git branch --set-upstream-to=origin/master master"
                        sh "git pull --rebase"
                        sh "mvn release:prepare release:perform ${params.MVN_FLAGS} -f bro-agent-api/pom.xml"
                    }
                    else {
                        sh "mvn -f bro-agent-api/pom.xml -Dcheckstyle.skip -Dpmd.skip -DskipTests deploy"
                    }
                }
            }
        }
        stage('Fetch Artifact Checksum') {
            when { expression { (params.GET_CHECKSUMS_FROM_ARM=="true") } }
                steps {
                    withCredentials([string(credentialsId: 'hub-arm-seli-api-token', variable: 'RELEASED_ARTIFACTS_REPO_API_TOKEN')]) {
                        sh "${bob} -r ./bro-agent-api/ruleset2_0_pra.yaml fetch-artifact-checksums"
                    }
                }
        }
        stage('Set Release Artifacts in Munin') {
            when { expression { (params.SET_ARTIFACTS_IN_MUNIN=="true") } }
                steps {
                    sh "${bob} -r ./bro-agent-api/ruleset2_0_pra.yaml munin-connect-ca-artifact"
                    sh "${bob} -r ./bro-agent-api/ruleset2_0_pra.yaml munin-set-artifact"
                }
        }
    }
    post {
        always {
            script {
                if (params.RELEASE!="true" && env.CODE_CHANGE != "0") {
                    withSonarQubeEnv('Sonarqube Server') {
                        sh "curl -u ${env.HUB_USR}:${env.HUB_PSW} '${env.SONAR_HOST_URL}/api/issues/search?componentKeys=com.ericsson.adp.mgmt:eric-ctrl-bro-lib-agent-api-cxa30109&branch=${params.GERRIT_BRANCH}&resolved=false' | jq -f sonar-report-builder.jq > bro-agent-api/target/sonar/sonar-report.json"
                        sonarToGerrit inspectionConfig: [autoMatch: true, baseConfig: [autoMatch: true, sonarReportPath: 'bro-agent-api/target/sonar/sonar-report.json']], notificationConfig: [commentedIssuesNotificationRecipient: 'NONE', negativeScoreNotificationRecipient: 'NONE'], reviewConfig: [noIssuesTitleTemplate: 'Bro Agent API SonarQube All Clear', issueFilterConfig: [severity: 'MINOR']], scoreConfig: [noIssuesScore: 0, issueFilterConfig: [severity: 'MINOR']]
                        archiveArtifacts artifacts: 'bro-agent-api/currentdeptree.txt, bro-agent-api/newdeptree.txt, bro-agent-api/target/site/surefire-report.html', allowEmptyArchive: true
                        for (Integer i = 0; i < 20; i++) {
                            try {
                                timeout(time: 15, unit: 'SECONDS') {
                                    def qg = waitForQualityGate()
                                    if (qg.status != 'OK') {
                                        error "Pipeline aborted due to quality gate coverage failure: ${qg.status}"
                                    } else {
                                        i = 20
                                    }
                                }
                            } catch (Throwable e) {
                                if (i == 19) {
                                    throw e
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
