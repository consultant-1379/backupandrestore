= Backup and Restore Orchestrator - Agent Implementation Guide for Python
:author: Michael Lawless (modified for Python specific parts Adam Visegradi)
:doc-name: Agent Implementation Guide
:doc-no: 7/19817-APR 201 40/2 # TODO
:revnumber: A
:revdate: {sys: date +%Y-%m-%d}
:approved-by-name: # TODO
:approved-by-department: # TODO

== Introduction

This guide is intended for engineers who want to use Python to build their own Agents in order to backup and restore their services.

This guide provides examples for creating a project, developing the Agent and packaging it.

Important: This API is not officially supported if you find any problem we greatly appreciate a fix patch for it according to innersourcing guidelines!

== Glossary

|=======================================================================
|Term |Description

| Agent | A component of a service which terminates requests from the Orchestrator and sends and receives backups.
| Orchestrator | The service which provides centralized control of all Agents and handles storage of backups.
| Backup | A collection of fragments which can be used to restore/recover a service or group of services to a previous state.
| Fragment | An individual part of a backup. A single service backup can have multiple fragments.
| Scope | A defined set of one or many services that will be included in the same backup. Scope should be configurable at deployment time.

|=======================================================================

== BRO Agent API

The bro-agent-api is a library that aids in the creation of backup and restore agents. This library takes care of the communication with the Orchestrator.
The end user achieves this by implementing methods for registration, backup and restore. This allows each Agent to have its own service specific behavior for these actions.

The bro-agent-api releases can be viewed https://arm.sero.gic.ericsson.se/artifactory/proj-adp-eric-ctrl-bro-python-api-pypi-local/[here.]

=== Project

To start using the bro-agent-api it is necessary to include the bro-agent-api in a project.

To do this using Bazel build you need to include an _http_archive_ rule in your WORKSPACE file

Do not forget to update the sha256 and strip_prefix fields with the relevant values.

    http_archive(
        name = "bro-agent",
        url = "https://gerrit-gamma.gic.ericsson.se/gitweb?p=AIA/microservices/backupandrestore.git;a=snapshot;h=refs/heads/master;sf=tgz"
        sha256 = "80f49469f1702ec64ef5d8e71302f6b781dca8ae06e560421cab42961c8c7ce6",
        strip_prefix = "backupandrestore-master-5f7456b/bro-agent-api/src",
        type = "tgz",
    )

After this you can depend on this with the following notation:

    ...
    deps = [
        ":bro_agent",
        ":patched_generated_python",
    ],
    ...

== Agent Implementation

The Agent implementation consists of two main parts, the creation of an Agent and the implementation of the required behavior for backup and restore for a specific service.

=== Creating an Agent

Once a Bazel project is setup the Agent can be created. There is a factory available for this in the bro-agent-api.

To create an agent, include the Agent factory _bro_agent.agent.AgentFactory_ into a py file and perform the following:
import the necessary classes and create the agent as follows:

    from bro_agent.agent.AgentFactory import AgentFactory
    from bro_agent.agent.OrchestratorConnectionInformation import OrchestratorConnectionInformation

    [...]

    behavior = MyBehavior()  # Explained later in this documentation
    connectionInfo = OrchestratorConnectionInformation("127.0.0.1", "3000")
    agentFactory = AgentFactory("NoCred")
    agent = agentFactory.create_agent(connectionInfo, behavior)

The class `MyBehavior` must be a user-defined class which is derived from
`AgentBehavior`.  This is the Agent's specific behavior; creating specific
behavior is discussed in a later section.

For details, check the https://gerrit-gamma.gic.ericsson.se/plugins/gitiles/AIA/microservices/backupandrestore/+/master/test-service-basic/src/main/python/broclient.py[example agent] found in the repository.

==== Keeping the Agent Alive

After an Agent is created, that instance of the Agent needs to be kept alive, since it will be responsible for listening to messages from the Orchestrator and replying, as well as triggering the service's backup and restore.

How to keep that instance and the Agent application itself alive is up to the engineer.

==== Behavior on loss of connectivity to Orchestrator

If the Agent loses its connection to the Orchestrator, the Agent will automatically attempt to reestablish the connection.
It will continuously try to re-register with the Orchestrator until it establishes a connection. This behavior is handled within the bro-agent-api.
To check the connection status you can use the following method in case you used AgentFactory to create the Agent:

    grpc_connectivity_state Agent::getGrpcChannelStatus(bool tryToConnect);

If the status is IDLE you can instruct the agent to try to connect with the _tryToConnect_ bool parameter

If the Orchestrator rejects the Agent's connection due to invalid registration information the Agent will not attempt to re-register.

See <<TroubleshootingGuide, Troubleshooting Guide>> for failure causes for registration.

== Defining Agent Specific Behavior

To create an Agent the expected Agent behavior must be supplied. To do so, create a concrete class that implements the interface AgentBehavior.

```
    class AgentBehavior(ABC):
		def get_registration_information(self):
			...
		def execute_backup(self, backup_execution_actions):
			...
		def execute_restore(self, restore_execution_actions):
			...
		def prepare_for_restore(self, restore_preparation_actions):
			...
		def post_restore(self, post_restore_actions):
			...
		def cancel_action(self, cancel_actions):
			...
```

=== Agent Specific Behavior - get_registration_information()

Implementation of the method `get_registration_information()`, allows the Agent to provide information specific to the Agent to the Orchestrator.

It needs to have a unique _agentId_, as well as product information related to the service to be backed up.

The Agent Id is used by the Orchestrator to identify Agents and in the event a duplicate Id is observed, that Agent will not be registered. To aid in creating a unique Agent Id it is recommended that the service name should be reflected in the Agent Id.

The Agent will always participate in operations that involve all Agents. In addition to that, by setting a value to the optional field "scope", the Agent can be backed up separately or as part of a sub set of all available Agents in a deployment.

A scope is not unique and can be used to indicate a group of services. It is recommended to get this field from the values.yaml to allow applications to set it as required. It is recommended to use brAgent.backupTypeList.backupType as the field in the values.yaml to take the value of scope from.

The scope field supports only a single scope. If the Agent's scope is "alpha", for example, the Agent will participate in actions involving all Agents and actions involving only Agents of scope "alpha". That Agent can only be the part of scope "alpha".

The apiVersion is to aid in handling older api versions in this release it should be set to 1.0.0

An example of _RegistrationInformation_, in json format just for clarity, could be:

    {
        "agentId": "myAgent",
        "scope": "alpha",
        "apiVersion": "1.0.0",
        "softwareVersion": {
            "productName": "productABC",
            "productNumber": "APR XXX XX",
            "revision": "R1A",
            "productionDate": "17-04-2019",
            "description": "ABC used by XYZ",
            "type": "Database"
        }
    }

=== Agent Specific Behavior - execute_backup()

Implementation of the method _execute_backup(backup_execution_actions)_, allows the Agent to perform the specified backup
procedure when called by the Orchestrator. The _execute_backup_ should perform three main actions:

* Create the backup.
* Send the backup.
* Indicate the state of the backup (successful/not successful).

To facilitate the sending of the data and the completion message, use
_backup_execution_actions_. This provides methods to perform the actions of
sending the backup data and the completion message. If the backup contains
multiple files they can be sent by calling the relevant method
_backup_execution_actions.send_backup(fragment_information)_ as many times as
required.

The name that was supplied to the Orchestrator upon request of a backup can be
accessed by using _backup_execution_actions.get_backup_name()_. This can be
used in creating the backup file.

To facilitate the case when an Agent may want to include its own metadata, the
optional parameter _custom_metadata_file_path_ of the _FragmentInformation_ may be
used.

If there is an issue in the transfer of the backup to the Orchestrator a
TODO: _FailedToTransferBackupException_ can be thrown. If this is seen, then the
decision can be made to take some corrective actions and retry the transfer.

An example of performing a backup can be seen below:

    def execute_backup(self, backup_execution_actions):
        logging.info("DTH backup implementation!")
        with open("/tmp/file", 'wb') as f:
            f.write(b"Hello World!")
        with open("/tmp/file", 'rb') as f:
            content = f.read()
        fragmentInformation = BackupFragmentInformation("1", "0.1", str(len(content)), None, "/tmp/file", None)
        backup_execution_actions.send_backup(fragmentInformation)

        with open("/tmp/file2", 'wb') as f:
            f.write(b"Hello World22222!")
        with open("/tmp/file2", 'rb') as f:
            content = f.read()
        fragmentInformation2 = BackupFragmentInformation("2", "0.1", str(len(content)), None, "/tmp/file2", None)
        backup_execution_actions.send_backup(fragmentInformation2)

        time.sleep(2)
        backup_execution_actions.backup_complete(True, "Successfully backed up content!")



As can be seen above _send_backup_ is used to transfer the backup to the Orchestrator, and it takes in _BackupFragmentInformation_. An example of _BackupFragmentInformation_, in json format just for clarity, could be:

    {
        "backupFile": "/var/opt/ericsson/<application>/backup/backup.txt",
        "customMetadataFilePath": "/var/opt/ericsson/<application>/backup/CustomMetadata.txt",
        "fragmentId": "123",
        "version": "0.0.0",
        "sizeInBytes": "12345"
    }

Note that as with Agent Id the fragment Id should be unique. It is recommended to include the host name of the pod the fragment originated from to the fragment Id, for example "eric-db-0".
All charts should enforce that pods should have an index or unique identifier after the name. This should aid in deciding the distribution of fragments in a restore scenario.

=== Agent Specific Behavior - execute_restore()

Implementation of the method _execute_restore(restore_execution_actions)_, allows the Agent to perform the specified restore procedure when called by the Orchestrator.
The _executeRestore_ should perform three main actions:

* Request the fragments to be downloaded from the supplied list.
* Perform restore.
* Indicate the state of the restore (successful/not successful).

To download the fragments and to send the completion message use
_restore_execution_actions_. This provides methods to perform the actions of
downloading the fragments and sending the completion message.

Before restoring data or downloading the fragments the Agent should check the compatibility of the data by validating the software version information of the backup to be restored.
To access this information use _restore_execution_actions->get_software_version()_.

The list of fragments available in the backup can be accessed using _restore_execution_actions->get_fragment_list()_.
This list contains fragment information that can be used to call _restore_execution_actions->download_fragment(fragment, restore_location)_ function. This will store the requested fragment in the location provided.

If the backup contains multiple fragments they can be downloaded by calling the relevant function _restore_execution_actions->download_fragment(fragment, restoreLocation)_ as many times as required.

The name of the backup that is being restored can be accessed by using _restore_execution_actions->get_backup_name()_ function.

If there is an issue in the download process _FailedToDownloadException_ is thrown. If this is seen, then the decision can be made to take some corrective actions and reinitiate the restore process.

An example of performing a restore can be seen below:

    def execute_restore(self, restore_execution_actions):
        logging.info("DTH restore implementation!")
        path = '/tmp/'
        for fragment in restore_execution_actions.restore_information.fragment:
            restore_execution_actions.download_fragment(fragment, path)
        logging.info("DTH restore finished!")
        time.sleep(2)
        restore_execution_actions.restore_complete(True, "Successfully restored content!")

As can be seen above _downloadFragment_ is used to download the fragment from the Orchestrator, and it takes in _FragmentInformation_. An example of _FragmentInformation_, in json format just for clarity, could be:

    {
        "fragmentId": "123",
        "version": "0.0.0",
        "sizeInBytes": "12345"
    }

=== CI/CD

Building proccess of the agent-api and quality checks can be found the links below:

The relevant Jenkinsfiles can be reviewed https://gerrit-gamma.gic.ericsson.se/gitweb?p=AIA/microservices/backupandrestore.git;a=blob_plain;f=bro-agent-api/Jenkinsfile_python;hb=refs/changes/33/6290533/59[here].

The relevant Bob rulesets for the test Agent can be reviewed https://gerrit-gamma.gic.ericsson.se/gitweb?p=AIA/microservices/backupandrestore.git;a=blob_plain;f=bro-agent-api/ruleset.yaml;hb=refs/changes/33/6290533/44[here].

[[AdditionalInformation]]
== Additional Information

The Orchestrator and Agents communicate via GRPC. That communication is defined in the “xxxxxx.proto” files found inside the _bro-agent-api_ project https://gerrit-gamma.gic.ericsson.se/plugins/gitiles/AIA/microservices/backupandrestore/+/refs/heads/master/bro-agent-api/src/main/proto/[here].

This guide covered how to build an Agent using the classes provided by _bro-agent-api_, which encapsulates that communication, and therefore does not cover details regarding GRPC.

[bibliography]
References
----------
[bibliography]
* [[TroubleshootingGuide]] Backup and Restore Troubleshooting Guide https://adp.ericsson.se/marketplace/backup-and-restore-orchestrator/documentation/general/troubleshooting-guide
