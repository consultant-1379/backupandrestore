import argparse
import re
import logging


class Vulnerability:
    INIT_LINE = "VA REPORT for Backup and Restore"
    SUMMARY_INIT_HEADER = "Summary of found vulnerabilities:"
    HOOK_IMAGE_HEADER = ("Vulnerabilities found in docker image armdocker.rnd."
                         "ericsson.se/proj-adp-eric-ctrl-bro-internal/"
                         "eric-ctrl-bro-hooklauncher")
    BRO_IMAGE_HEADER = ("Vulnerabilities found in docker image armdocker.rnd."
                        "ericsson.se/proj-adp-eric-ctrl-bro-internal/"
                        "eric-ctrl-bro:")
    BRO_IMAGE_END = "Results from CIS-CAT Pro Assessor scan"
    exceptions = dict()

    def parse_cve_table_list(self, lines_from_report):
        cve_list = []
        summary_process = False
        first_entry_found = False

        # Main summary table:
        for line in lines_from_report:
            if self.SUMMARY_INIT_HEADER in line or summary_process:
                summary_process = True
                entry_in_summary_table = \
                    r"(\b[A-Z][\d+]+\b)(\b\|[A-Z][a-z]+\|\b).+(\[.+\])"
                matches = re.search(
                    entry_in_summary_table,
                    line.rstrip())
                if matches is not None:
                    first_entry_found = True
                    line_parts = line.split("|")
                    severity = line_parts[2]
                    tool = line_parts[4]
                    cve = line_parts[3].replace("[", "")\
                        .replace("]", "")

                    # Create dictionary which saves the found data
                    cve_dict = {
                        "tool": tool,
                        "severity": severity,
                        "cve": cve
                    }
                    cve_list.append(cve_dict)  # append the parsed results

                if first_entry_found and line.isspace():
                    break

        return cve_list

    def parse_image_table_list(self, lines_from_report, cve_list,
                               image_header, image_name):
        first_entry_found = False
        image_process = False

        # Extract CVE name:
        for line in lines_from_report:
            if (image_header in line) or image_process:
                image_process = True  # begin processing the results
                # search for CVE:
                image_matches = re.search(r"\[[^\]]*]", line.rstrip())
                if image_matches is not None:
                    first_entry_found = True
                    # Extract CVE name:
                    cve = image_matches.group(0)\
                        .replace("[", "").replace("]", "")
                    # Append an image key for each CVE in the list
                    for dictionary in cve_list:
                        if dictionary["cve"] == cve:
                            dictionary.setdefault("images", [])\
                                    .append(image_name)

            if first_entry_found and line.isspace():
                break

        return cve_list

    def process_file_main_method(self, file):
        # Parsing VA report files
        with open(file) as f:
            lines_from_file = f.readlines()

        # Extracting CVEs from Summary Table
        cve_list = self.parse_cve_table_list(lines_from_file)

        # Appending image tag to CVEs
        cve_list = self.parse_image_table_list(lines_from_file,
                                         cve_list, self.HOOK_IMAGE_HEADER,
                                         "Hooklauncher image")
        cve_list = self.parse_image_table_list(lines_from_file,
                                         cve_list, self.BRO_IMAGE_HEADER,
                                         "BRO image")

        return cve_list


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    logging.info("Script starting")

    # Create our Argument parser and set its description
    parser = argparse.ArgumentParser(
        description="analyse a vulnerability file")

    parser.add_argument('previous_file',
                        help='The location of previous report')

    parser.add_argument('current_file',
                        help='The location of current report')

    parser.add_argument('output_file',
                        help='The name of the comparison output file')

    # Parse the args (argparse automatically grabs the values from sys.argv)
    args = parser.parse_args()

    p_file = args.previous_file
    c_file = args.current_file
    o_file = args.output_file

    processor = Vulnerability()

    cve_list_previous = processor.process_file_main_method(p_file)
    cve_list_current = processor.process_file_main_method(c_file)

    cve_list_previous = set(str(cve) for cve in cve_list_previous)
    cve_list_current = set(str(cve) for cve in cve_list_current)

    # Find new vulnerabilities that have been added to new report
    new_differences = cve_list_current.difference(cve_list_previous)
    removed_differences = cve_list_previous.difference(cve_list_current)

    logging.info("Outputting differences between files")
    # Output the differences between the two reports
    # (if differences are present)
    if new_differences or removed_differences:
        f = open(o_file, "w")
        f.write("New differences:\n")
        for line in new_differences:
            f.write(str(line) + "\n")

        f.write("\nRemoved differences:\n")
        for line in removed_differences:
            f.write(str(line) + "\n")

        f.close()

    logging.info("Script finished")
